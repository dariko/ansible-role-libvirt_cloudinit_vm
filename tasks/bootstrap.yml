-   name: read macs from libvirt domain (match by parent)
    when: vm_identify_interfaces_by_parent
    block:
    -   name: read generated macs (match by parent)
        delegate_to: "{{vm_host}}"
        shell: |
            {% for n in vm_networks %}
            echo -n {{n.get('id',n.parent)}}\;
            virsh dumpxml {{vm_hostname}}|xmllint --xpath "string(//interface[source/@{{n.type}}='{{n.parent}}']/mac/@address)" -
            echo
            {% endfor %}
        register: out_generated_macs
        when: vm_networks != []

    -   name: set fact libvirt_generated_macs (match by parent)
        set_fact:
            libvirt_generated_macs: |
                [{% for line in out_generated_macs.stdout_lines %}
                {
                    'id':'{{line.split(';')[0]}}',
                    'mac':'{{line.split(';')[1]}}'
                }{{',' if not loop.last else ''}}
                {% endfor %}]
        when: vm_networks != []

-   name: read macs from libvirt domain (match by order)
    when: not vm_identify_interfaces_by_parent
    block:
    -   name: read generated macs (match by order)
        delegate_to: "{{vm_host}}"
        shell: |
            virsh dumpxml {{vm_hostname}}|xmllint --xpath "//interface/mac/@address" - |sed 's/ address=/\n/g' |cut -d '"' -f 2|grep -v ^$
        register: out_generated_macs
        when: vm_networks != []

    -   name: set fact libvirt_generated_macs (match by order)
        set_fact:
            libvirt_generated_macs: "{{out_generated_macs.stdout_lines}}"
        when: vm_networks != []



-   name: template user-data
    delegate_to: "{{vm_host}}"
    template:
        src: user-data.j2
        dest: "{{vm_dir}}/user-data"

-   name: template meta-data
    delegate_to: "{{vm_host}}"
    template:
        src: meta-data.j2
        dest: "{{vm_dir}}/meta-data"

-   name: template network-config v1
    delegate_to: "{{vm_host}}"
    template:
        src: network-config.v1.j2
        dest: "{{vm_dir}}/network-config"
    when: vm_network_config_version|string=="1"

-   name: template network-config v2
    delegate_to: "{{vm_host}}"
    template:
        src: network-config.v2.j2
        dest: "{{vm_dir}}/network-config"
    when: vm_network_config_version|string=="2"

-   name: nocloud genisoimage
    delegate_to: "{{vm_host}}"
    shell: |
        genisoimage  -output {{vm_cloudinit_iso}} -volid cidata -joliet -rock user-data meta-data network-config
    args:
        chdir: "{{vm_dir}}"

-   name: create drives
    delegate_to: "{{vm_host}}"
    shell: |
        {% for drive in vm_drives %}
            {% if drive.type=='file' %}
                {% set drive_path = "%s/drive_%s.img" % (vm_dir, loop.index) %}
                {% if drive.source|default(False) %}
        #cp "{{drive.source}}" "{{drive_path}}"
        qemu-img convert -o lazy_refcounts=on,preallocation=metadata \
                         -O qcow2 \
                         "{{drive.source}}" \
                         "{{drive_path}}"
                    {% if drive.size|default('False') %}
        qemu-img resize "{{drive_path}}" {{drive.size_gb}}G
                    {% endif %}
                {% else %}
        qemu-img create -f qcow2 {{drive_path}} {{drive.size}}G
                {% endif %}
            {% elif drive.type=='block' %}
                {% if drive.manage|default(False) %}
        lvcreate --name "{{drive.path.split("/")[3]}}" \
            -L "{{drive.size_gb}}G" \
            "{{drive.path.split("/")[2]}}"
                {% endif %}
                {% if 'source' in drive.keys() %}
        qemu-img convert -O raw {{drive.source}} {{drive.path}}
                {% endif %}
            {% endif %}
        {% endfor %}
    when: vm_drives|length > 0
